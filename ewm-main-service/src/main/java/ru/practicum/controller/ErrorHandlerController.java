package ru.practicum.controller;

import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import ru.practicum.exception.*;

import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@RestControllerAdvice
public class ErrorHandlerController {

    /* –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –æ—Ç Runtime */
    @ExceptionHandler({MethodArgumentNotValidException.class, MethodArgumentTypeMismatchException.class, MainExceptionIncorrectDateTime.class})
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ApiError handelRuntimeException(RuntimeException e) {
        ApiError apiError = ApiError.builder()
                .errors(List.of(e.getStackTrace()).subList(0, 1))
                .status("400 BAD_REQUEST")
                .reason("Incorrectly made request")
                .message(e.getMessage())
                .timestamp(LocalDateTime.now())
                .build();

        log.warn("üü•üì± –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: " + apiError.toString());
        return apiError;
    }

    /* –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∏ –æ—Ç Throwable */
    @ExceptionHandler(MissingServletRequestParameterException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public ApiError handelMissingServletRequestParameterException(MissingServletRequestParameterException e) {
        ApiError apiError = ApiError.builder()
                .errors(List.of(e.getStackTrace()).subList(0, 1))
                .status("400 BAD_REQUEST")
                .reason("Incorrectly made request")
                .message(e.getMessage())
                .timestamp(LocalDateTime.now())
                .build();

        log.warn("üü•üì± –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø—É—Ç–∏/–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞): " + apiError.toString());
        return apiError;
    }

    @ExceptionHandler(MainExceptionIdNotFound.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public ApiError handelMethodArgumentNotValidException(MainExceptionIdNotFound e) {
        ApiError apiError = ApiError.builder()
                .errors(List.of(e.getStackTrace()).subList(0, 1))
                .status("404 NOT_FOUND")
                .reason("The required object was not found.")
                .message(e.getMessage())
                .timestamp(LocalDateTime.now())
                .build();

        log.warn("üü•üì± id –Ω–µ –Ω–∞–π–¥–µ–Ω: " + apiError.toString());
        return apiError;
    }

    @ExceptionHandler(MainExceptionImpossibleToPublicGetEntity.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public ApiError handelMainExceptionImpossibleToPublicGetEntity(MainExceptionImpossibleToPublicGetEntity e) {
        ApiError apiError = ApiError.builder()
                .errors(List.of(e.getStackTrace()).subList(0, 1))
                .status("404 NOT_FOUND")
                .reason("The required object was not found.")
                .message(e.getMessage())
                .timestamp(LocalDateTime.now())
                .build();

        log.warn("üü•üì± –æ–±—ä–µ–∫—Ç/—Å—É—â–Ω–æ—Å—Ç—å/dto –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: " + apiError.toString());
        return apiError;
    }

    @ExceptionHandler(MainExceptionIncompatibleIds.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public ApiError handelMainExceptionInitiatorIdNotLinkedToEventId(MainExceptionIncompatibleIds e) {
        ApiError apiError = ApiError.builder()
                .errors(List.of(e.getStackTrace()).subList(0, 1))
                .status("400 BAD_REQUEST")
                .reason("Incorrectly made request")
                .message(e.getMessage())
                .timestamp(LocalDateTime.now())
                .build();

        log.warn("üü•üì± –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø—É—Ç–∏): " + apiError.toString());
        return apiError;
    }

    @ExceptionHandler
    @ResponseStatus(HttpStatus.CONFLICT)
    public ApiError handelConstraintViolationException(DataIntegrityViolationException e) {
        ApiError apiError = ApiError.builder()
                .errors(List.of(e.getStackTrace()).subList(0, 1))
                .status("409 CONFLICT")
                .reason("Integrity constraint has been violated. OR For the requested operation the conditions are not met.")
                .message(e.getMessage() + "; SQL [n/a]; ")
                .timestamp(LocalDateTime.now())
                .build();

        log.warn("üü•üì± –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥: " + apiError.toString());
        return apiError;
    }

    @ExceptionHandler(MainExceptionImpossibleToCreateOrUpdateEntity.class)
    @ResponseStatus(HttpStatus.CONFLICT)
    public ApiError handelMainExceptionImpossibleToCreateEntity(MainExceptionImpossibleToCreateOrUpdateEntity e) {
        ApiError apiError = ApiError.builder()
                .errors(List.of(e.getStackTrace()).subList(0, 1))
                .status("409 CONFLICT")
                .reason("For the requested operation the conditions are not met.")
                .message(e.getMessage())
                .timestamp(LocalDateTime.now())
                .build();

        log.warn("üü•üì± —Å—É—â–Ω–æ—Å—Ç—å –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " + apiError.toString());
        return apiError;
    }

    @ExceptionHandler(Throwable.class)
    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
    public ApiError handelThrowable(Throwable e) {
        ApiError apiError = ApiError.builder()
                .errors(List.of(e.getStackTrace()).subList(0, 1))
                .status("500 INTERNAL_SERVER_ERROR")
                .reason("Server error")
                .message(e.getMessage())
                .timestamp(LocalDateTime.now())
                .build();

        log.warn("üü•üì± –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + apiError.toString());
        return apiError;
    }
}
