package ru.practicum.service.comment;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.practicum.dto.comment.CommentDto;
import ru.practicum.dto.comment.RequestCommentDto;
import ru.practicum.entity.comment.Comment;
import ru.practicum.entity.comment.CommentStatus;
import ru.practicum.entity.event.Event;
import ru.practicum.entity.event.EventState;
import ru.practicum.exception.MainExceptionIdNotFound;
import ru.practicum.exception.MainExceptionImpossibleToCreateOrUpdateEntity;
import ru.practicum.exception.MainExceptionImpossibleToPublicGetEntity;
import ru.practicum.exception.MainExceptionIncompatibleIds;
import ru.practicum.mapper.CommentMapper;
import ru.practicum.repository.comment.CommentRepository;
import ru.practicum.service.event.EventService;
import ru.practicum.service.user.UserService;

import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@Transactional(readOnly = true)
@RequiredArgsConstructor
@Service
public class CommentServiceImpl implements CommentService {
    private final CommentRepository commentRepository;
    private final UserService userService;
    private final EventService eventService;

    @Transactional
    public CommentDto createForCommentatorByCommentatorIdAndEventId(long commentatorId, long eventId, RequestCommentDto requestCommentDto) {
        Event event = eventService.checkAndGetEntityById(eventId);
        if (!event.getState().equals(EventState.PUBLISHED))
            throw new MainExceptionImpossibleToCreateOrUpdateEntity("—Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ 'PUBLISHED'");

        if (requestCommentDto.getStatus().equals(CommentStatus.PENDING)) {
            Comment comment = CommentMapper.toComment(requestCommentDto);

            comment.setCommentator(userService.checkAndGetEntityById(commentatorId));
            comment.setEvent(event);
            comment.setCreatedOn(LocalDateTime.now());

            Comment savedComment = commentRepository.save(comment);

            log.info("üü© —Å–æ–∑–¥–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={}", savedComment);
            return CommentMapper.toCommentDto(savedComment);
        }

        throw new MainExceptionImpossibleToCreateOrUpdateEntity("—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'PENDING'");
    }

    @Transactional
    public CommentDto updateForAdminByCommentId(long commentId, RequestCommentDto requestCommentDto) {
        Comment oldComment = checkAndGetEntityById(commentId);
        if (!oldComment.getStatus().equals(CommentStatus.PENDING))
            throw new MainExceptionImpossibleToCreateOrUpdateEntity("–æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'PENDING'");

        CommentStatus newStatus = requestCommentDto.getStatus();
        Comment updatedComment = oldComment;
        if (newStatus.equals(CommentStatus.CANCELED)) {
            oldComment.setStatus(CommentStatus.CANCELED);

            updatedComment = commentRepository.save(oldComment);

            log.info("üü™ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∑–∞–∫—Ä—ã—Ç) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={}", updatedComment);
        }
        if (newStatus.equals(CommentStatus.PUBLISHED) && !requestCommentDto.getText().equals(oldComment.getText())) {
            oldComment.setText(requestCommentDto.getText());
            oldComment.setPublishedOn(LocalDateTime.now());
            oldComment.setStatus(CommentStatus.PUBLISHED);

            updatedComment = commentRepository.save(oldComment);

            log.info("üü™ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={}", updatedComment);
        } else {
            log.info("üü™ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ç–∫ —Ç–µ–∫—Å—Ç –Ω–µ –∏–º–µ–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π={}", oldComment);
        }

        return CommentMapper.toCommentDto(updatedComment);
    }

    @Transactional
    public CommentDto updateForCommentatorByCommentatorIdAndCommentId(long commentatorId, long commentId, RequestCommentDto requestCommentDto) {
        Comment oldComment = checkCommentatorIdIsLinkedToCommentId(commentatorId, commentId);
        CommentStatus newStatus = requestCommentDto.getStatus();

        if (newStatus.equals(CommentStatus.CANCELED))
            throw new MainExceptionImpossibleToCreateOrUpdateEntity("–∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä—É –Ω–µ–ª—å–∑—è \"–∑–∞–∫—Ä—ã–≤–∞—Ç—å/CANCELED\" " +
                    "–∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π. –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å");

        Comment updatedComment = oldComment;
        if (!requestCommentDto.getText().equals(oldComment.getText())) {
            oldComment.setText(requestCommentDto.getText());
            oldComment.setUpdateDate(LocalDateTime.now());
            oldComment.setStatus(CommentStatus.PENDING);

            updatedComment = commentRepository.save(oldComment);

            log.info("üü™ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={}", updatedComment);
        } else {
            log.info("üü™ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ç–∫ —Ç–µ–∫—Å—Ç –Ω–µ –∏–º–µ–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π={}", oldComment);
        }

        return CommentMapper.toCommentDto(updatedComment);
    }

    public Comment checkAndGetEntityById(long id) {
        return commentRepository.findById(id).orElseThrow(() -> new MainExceptionIdNotFound("Comment with id=" + id + " was not found"));
    }

    public CommentDto getForAdminByCommentId(long commentId) {
        Comment comment = checkAndGetEntityById(commentId);

        log.info("üü¶ –¥–ª—è –∞–¥–∏–º–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={}", comment);
        return CommentMapper.toCommentDto(comment);
    }

    public CommentDto getForCommentatorByCommentatorIdAndCommentId(long commentatorId, long commentId) {
        Comment comment = checkAndGetEntityById(commentId);

        log.info("üü¶ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ (–∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≤—ã–¥–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={}", comment);
        return CommentMapper.toCommentDto(comment);
    }

    public CommentDto getForPublicUserByEventIdAndCommentId(long eventId, long commentId) {
        Comment comment = commentRepository.findByIdAndEventIdAndStatus(commentId, eventId, CommentStatus.PUBLISHED).orElseThrow(() -> new MainExceptionImpossibleToPublicGetEntity("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ id –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: " + commentId + " –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å id —Å–æ–±—ã—Ç–∏—è: " + eventId));

        log.info("üü¶ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–¥–∞–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π={}", comment);
        return CommentMapper.toCommentDto(comment);
    }

    public List<CommentDto> getAllForPublicUserByEventId(long eventId, int from, int size) {
        Page<Comment> comments = commentRepository.findAllByEventIdAndStatus(eventId, CommentStatus.PUBLISHED,
                PageRequest.of(from, size));

        log.info("üü¶ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤={}", comments);
        return CommentMapper.toCommentDtos(comments.toList());
    }

    public void deleteForCommentatorByCommentatorIdAndCommentId(long commentatorId, long commentId) {
        checkCommentatorIdIsLinkedToCommentId(commentatorId, commentId);

        commentRepository.deleteById(commentId);
        log.info("‚¨õÔ∏è –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–º —É–¥–∞–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ id={}", commentId);
    }

    public Comment checkCommentatorIdIsLinkedToCommentId(long commentatorId, long commentId) {
        Comment comment = commentRepository.findByIdAndCommentatorId(commentId, commentatorId);

        if (comment == null) {
            throw new MainExceptionIncompatibleIds("id –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞: " + commentatorId + " –ù–ï —Å–≤—è–∑–∞–Ω —Å id " +
                    "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: " + commentId);
        } else {
            return comment;
        }
    }
}
